// $t@$h - This script quickly scans Windows host for obvious holes
//         This script does NOT require Admin privileges
//         This script does NOT modify your system IN ANY WAY. Enjoy
using Microsoft.Win32;
using System.Management;
using NetFwTypeLib;

public class SecurityPostureCheckApp
{
  [STAThread]
  static void Main()
  {
    Application.EnableVisualStyles();
    Application.SetCompatibleTextRenderingDefault(false);

    // Scanners
    CheckSecureBoot();
    CheckWindowsFirewall();
    CheckWindowsDefender();
    CheckAntivirusStatus();
    CheckWindowsUpdateStatus();
    CheckUACStatus();
    CheckFirewallProfiles();
  }

  static void CheckSecureBoot()
  {
    var secureBootKey = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Control\SecureBoot\State");
    var secureBootValue = secureBootKey?.GetValue("UEFISecureBootEnabled");

    string message = secureBootValue != null && (int)secureBootValue == 1
                      ? "Secure Boot is enabled."
                      : "Secure Boot is NOT enabled!! Enabling it is HIGHLY recommended for security.";

    MessageBox.Show(message, "Secure Boot Check", MessageBoxButtons.OK, MessageBoxIcon.Information);
  }

  static void CheckWindowsFirewall()
  {
    try
    {
      INetFwPolicy2 firewallPolicy = (INetFwPolicy2)Activator.CreateInstance(Type.GetTypeFromProgID("HNetCfg.FwPolicy2"));

      bool isFirewallEnabled = firewallPolicy.get_FirewallEnabled(NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_DOMAIN)
          && firewallPolicy.get_FirewallEnabled(NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_PRIVATE)
          && firewallPolicy.get_FirewallEnabled(NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_PUBLIC);

      string message = isFirewallEnabled ? "Windows Firewall is active." : "Windows Firewall is NOT active.";
      MessageBox.Show(message, "Windows Firewall Check", MessageBoxButtons.OK, MessageBoxIcon.Information);
    }
    catch (Exception e)
    {
      MessageBox.Show($"Error checking Windows Firewall: {e.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
    }
  }

  static void CheckWindowsDefender()
  {
    var defenderKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows Defender");
    var defenderValue = defenderKey?.GetValue("DisableAntiSpyware");

    string message = defenderValue != null && (int)defenderValue == 0
                      ? "Windows Defender is enabled."
                      : "Windows Defender is NOT enabled. It's recommended to enable Windows Defender for protection.";

    MessageBox.Show(message, "Windows Defender Check", MessageBoxButtons.OK, MessageBoxIcon.Information);
  }

  static void CheckAntivirusStatus()
  {
    try
    {
      using (var searcher = new ManagementObjectSearcher(@"\\" + Environment.MachineName + @"\root\SecurityCenter2", "SELECT * FROM AntivirusProduct"))
      {
        var antivirusProducts = searcher.Get();
        var message = antivirusProducts.Count > 0 ? "Antivirus protection is active." : "No active antivirus protection found.";
        MessageBox.Show(message, "Antivirus Check", MessageBoxButtons.OK, MessageBoxIcon.Information);
      }
    }
    catch
    {
      MessageBox.Show("Error checking antivirus status.", "Antivirus Check", MessageBoxButtons.OK, MessageBoxIcon.Error);
    }
  }

  static void CheckWindowsUpdateStatus()
  {
    var updateKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU");
    var auOptions = updateKey?.GetValue("AUOptions");

    string message = auOptions != null && (int)auOptions == 4
                      ? "Automatic Windows Updates are enabled."
                      : "Automatic Windows Updates are NOT enabled. It's recommended to enable automatic updates for security.";

    MessageBox.Show(message, "Windows Update Check", MessageBoxButtons.OK, MessageBoxIcon.Information);
  }

  static void CheckUACStatus()
  {
    var uacKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System");
    var enableLua = uacKey?.GetValue("EnableLUA");

    string message = enableLua != null && (int)enableLua == 1
                      ? "User Account Control (UAC) is enabled."
                      : "User Account Control (UAC) is NOT enabled. It's recommended to enable UAC for added security.";

    MessageBox.Show(message, "UAC Check", MessageBoxButtons.OK, MessageBoxIcon.Information);
  }

  static void CheckFirewallProfiles()
  {
    try
    {
      string firewallEnabledMessage = "Firewall Status:\n";
      using (var firewallSearcher = new ManagementObjectSearcher(@"root\StandardCimv2", "SELECT * FROM MSFT_NetFirewallProfile"))
      {
        foreach (ManagementObject obj in firewallSearcher.Get())
        {
            string profileName = obj["Name"].ToString();
            UInt16 enabled = (UInt16)obj["Enabled"];
            firewallEnabledMessage += $"{profileName} Profile: {(enabled == 1 ? "Enabled" : "Disabled")}\n";
        }
      }
      MessageBox.Show(firewallEnabledMessage, "Firewall Profile Check", MessageBoxButtons.OK, MessageBoxIcon.Information);
    }
    catch (Exception e)
    {
      MessageBox.Show($"Error check firewall profiles: {e.Message}", "Firewall Profile Check", MessageBoxButtons.OK, MessageBoxIcon.Error);
    }
  }
}
